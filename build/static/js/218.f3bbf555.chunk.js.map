{"version":3,"sources":["views/forms/formik/FormikBasic.js","views/forms/formik/FormikErrorMsg.js","views/forms/formik/FormikValidation.js","views/forms/formik/Formik.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["FormikBasic","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","React","createElement","Card","CardHeader","CardTitle","CardBody","Formik","initialValues","firstName","lastName","email","onSubmit","values","setTimeout","toast","success","JSON","stringify","render","Form","FormGroup","htmlFor","Field","className","name","placeholder","type","Button","Ripple","color","ToastContainer","Component","SignUpSchema","Yup","shape","required","min","max","FormikErrorMsg","validationSchema","_ref","errors","touched","ErrorMessage","component","msg","formSchema","number","url","date","minlength","maxlength","FormValidation","Label","for","id","concat","Fragment","Breadcrumbs","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","lg","md","sm","FormikValidation","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","_extends","defaultProps"],"mappings":"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","file":"static/js/218.f3bbf555.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Button,\r\n  FormGroup\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form } from \"formik\"\r\nimport { ToastContainer, toast } from \"react-toastify\"\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\n\r\nclass FormikBasic extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Basic</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>\r\n            Getting values in and out of form state is easy using formik, you\r\n            won't have to manage state to make your input a controlled element.\r\n          </p>\r\n          <Formik\r\n            initialValues={{\r\n              firstName: \"\",\r\n              lastName: \"\",\r\n              email: \"\"\r\n            }}\r\n            onSubmit={values => {\r\n              setTimeout(() => {\r\n                toast.success(JSON.stringify(values, null, 2))\r\n              }, 500)\r\n            }}\r\n            render={() => (\r\n              <Form>\r\n                <FormGroup>\r\n                  <label htmlFor=\"firstName\">First Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    placeholder=\"Jane\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"lastName\">Last Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"lastName\"\r\n                    placeholder=\"Doe\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    placeholder=\"jane@acme.com\"\r\n                    type=\"email\"\r\n                  />\r\n                </FormGroup>\r\n                <Button.Ripple color=\"primary\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          />\r\n          <ToastContainer />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormikBasic\r\n","import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Button,\r\n  FormGroup\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst SignUpSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(\"Invalid email address\")\r\n    .required(\"Required\"),\r\n  firstName: Yup.string()\r\n    .min(2, \"Must be longer than 2 characters\")\r\n    .max(20, \"Nice try, nobody has a first name that long\")\r\n    .required(\"Required\"),\r\n  lastName: Yup.string()\r\n    .min(2, \"Must be longer than 2 characters\")\r\n    .max(20, \"Nice try, nobody has a last name that long\")\r\n    .required(\"Required\")\r\n})\r\n\r\nclass FormikErrorMsg extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Error Msg</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>\r\n            You can show error messages with formik using{\" \"}\r\n            <code>validationSchema</code> prop with formik tag.\r\n          </p>\r\n          <Formik\r\n            initialValues={{\r\n              email: \"\",\r\n              firstName: \"\",\r\n              lastName: \"\"\r\n            }}\r\n            validationSchema={SignUpSchema}\r\n            render={({ errors, touched }) => (\r\n              <Form>\r\n                <FormGroup>\r\n                  <label htmlFor=\"firstName\">First Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    placeholder=\"Jane\"\r\n                    type=\"text\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"firstName\"\r\n                    component=\"div\"\r\n                    className=\"field-error text-danger\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"lastName\">Last Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"lastName\"\r\n                    placeholder=\"Doe\"\r\n                    type=\"text\"\r\n                  />\r\n                  <ErrorMessage name=\"firstName\">\r\n                    {(msg /** this is the same as the above */) => (\r\n                      <div className=\"field-error text-danger\">{msg}</div>\r\n                    )}\r\n                  </ErrorMessage>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    placeholder=\"jane@acme.com\"\r\n                    type=\"email\"\r\n                  />\r\n                  {/* This will render a string */}\r\n                  <ErrorMessage name=\"email\">\r\n                    {(msg /** this is the same as the above */) => (\r\n                      <div className=\"field-error text-danger\">{msg}</div>\r\n                    )}\r\n                  </ErrorMessage>\r\n                </FormGroup>\r\n\r\n                <Button.Ripple color=\"primary\" className=\"mt-1\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormikErrorMsg\r\n","import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  FormGroup,\r\n  Button,\r\n  Label\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form } from \"formik\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst formSchema = Yup.object().shape({\r\n  required: Yup.string().required(\"Required\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .required(\"Required\"),\r\n  number: Yup.number().required(\"Required\"),\r\n  url: Yup.string()\r\n    .url()\r\n    .required(\"Required\"),\r\n  date: Yup.date().required(\"Required\"),\r\n  minlength: Yup.string()\r\n    .min(4, \"Too Short!\")\r\n    .required(\"Required\"),\r\n  maxlength: Yup.string()\r\n    .max(5, \"Too Long!\")\r\n    .required(\"Required\")\r\n})\r\n\r\nclass FormValidation extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle> Validation</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Formik\r\n            initialValues={{\r\n              required: \"\",\r\n              email: \"\",\r\n              url: \"\",\r\n              number: \"\",\r\n              date: \"\",\r\n              minlength: \"\",\r\n              maxlength: \"\"\r\n            }}\r\n            validationSchema={formSchema}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <Form>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"required\">Name</Label>\r\n                  <Field\r\n                    name=\"required\"\r\n                    id=\"required\"\r\n                    className={`form-control ${errors.required &&\r\n                      touched.required &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.required && touched.required ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.required}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"email\">Email</Label>\r\n                  <Field\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    className={`form-control ${errors.email &&\r\n                      touched.email &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.email && touched.email ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.email}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"url\">Website URL</Label>\r\n                  <Field\r\n                    name=\"url\"\r\n                    id=\"url\"\r\n                    className={`form-control ${errors.url &&\r\n                      touched.url &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.url && touched.url ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.url}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"number\">Number</Label>\r\n                  <Field\r\n                    name=\"number\"\r\n                    id=\"number\"\r\n                    className={`form-control ${errors.number &&\r\n                      touched.number &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.number && touched.number ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.number}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"date\">Date</Label>\r\n                  <Field\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    id=\"date\"\r\n                    className={`form-control ${errors.date &&\r\n                      touched.date &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.date && touched.date ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.date}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"minlength\">\r\n                    Min Length (Minimum 4 Characters)\r\n                  </Label>\r\n                  <Field\r\n                    name=\"minlength\"\r\n                    id=\"minlength\"\r\n                    className={`form-control ${errors.minlength &&\r\n                      touched.minlength &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.minlength && touched.minlength ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.minlength}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"maxlength\">\r\n                    Max Length (Maximum 5 Characters)\r\n                  </Label>\r\n                  <Field\r\n                    name=\"maxlength\"\r\n                    id=\"maxlength\"\r\n                    className={`form-control ${errors.maxlength &&\r\n                      touched.maxlength &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.maxlength && touched.maxlength ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.maxlength}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <Button.Ripple color=\"primary\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormValidation\r\n","import React from \"react\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\"\r\nimport FormikBasic from \"./FormikBasic\"\r\nimport FormikErrorMsg from \"./FormikErrorMsg\"\r\nimport FormikValidation from \"./FormikValidation\"\r\n\r\nclass Formik extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Breadcrumbs\r\n          breadCrumbTitle=\"Formik\"\r\n          breadCrumbParent=\"Form\"\r\n          breadCrumbActive=\"Formik\"\r\n        />\r\n        <Row>\r\n          <Col lg=\"6\" md=\"12\">\r\n            <FormikBasic />\r\n          </Col>\r\n          <Col lg=\"6\" md=\"12\">\r\n            <FormikErrorMsg />\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <FormikValidation />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default Formik\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}