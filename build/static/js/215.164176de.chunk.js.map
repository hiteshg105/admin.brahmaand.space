{"version":3,"sources":["views/forms/formik/FormikBasic.js","views/forms/formik/FormikErrorMsg.js","views/forms/formik/FormikValidation.js","views/forms/formik/Formik.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["FormikBasic","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","React","createElement","Card","CardHeader","CardTitle","CardBody","Formik","initialValues","firstName","lastName","email","onSubmit","values","setTimeout","toast","success","JSON","stringify","render","Form","FormGroup","htmlFor","Field","className","name","placeholder","type","Button","Ripple","color","ToastContainer","Component","SignUpSchema","Yup","shape","required","min","max","FormikErrorMsg","validationSchema","_ref","errors","touched","ErrorMessage","component","msg","formSchema","number","url","date","minlength","maxlength","FormValidation","Label","for","id","concat","Fragment","Breadcrumbs","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","lg","md","sm","FormikValidation","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","_extends","defaultProps"],"mappings":"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","file":"static/js/215.164176de.chunk.js","sourcesContent":["import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Button,\n  FormGroup\n} from \"reactstrap\"\nimport { Formik, Field, Form } from \"formik\"\nimport { ToastContainer, toast } from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\n\nclass FormikBasic extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Basic</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>\n            Getting values in and out of form state is easy using formik, you\n            won't have to manage state to make your input a controlled element.\n          </p>\n          <Formik\n            initialValues={{\n              firstName: \"\",\n              lastName: \"\",\n              email: \"\"\n            }}\n            onSubmit={values => {\n              setTimeout(() => {\n                toast.success(JSON.stringify(values, null, 2))\n              }, 500)\n            }}\n            render={() => (\n              <Form>\n                <FormGroup>\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    placeholder=\"Jane\"\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    placeholder=\"Doe\"\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"email\"\n                    placeholder=\"jane@acme.com\"\n                    type=\"email\"\n                  />\n                </FormGroup>\n                <Button.Ripple color=\"primary\" type=\"submit\">\n                  Submit\n                </Button.Ripple>\n              </Form>\n            )}\n          />\n          <ToastContainer />\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default FormikBasic\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Button,\n  FormGroup\n} from \"reactstrap\"\nimport { Formik, Field, Form, ErrorMessage } from \"formik\"\nimport * as Yup from \"yup\"\n\nconst SignUpSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Invalid email address\")\n    .required(\"Required\"),\n  firstName: Yup.string()\n    .min(2, \"Must be longer than 2 characters\")\n    .max(20, \"Nice try, nobody has a first name that long\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .min(2, \"Must be longer than 2 characters\")\n    .max(20, \"Nice try, nobody has a last name that long\")\n    .required(\"Required\")\n})\n\nclass FormikErrorMsg extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Error Msg</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>\n            You can show error messages with formik using{\" \"}\n            <code>validationSchema</code> prop with formik tag.\n          </p>\n          <Formik\n            initialValues={{\n              email: \"\",\n              firstName: \"\",\n              lastName: \"\"\n            }}\n            validationSchema={SignUpSchema}\n            render={({ errors, touched }) => (\n              <Form>\n                <FormGroup>\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    placeholder=\"Jane\"\n                    type=\"text\"\n                  />\n                  <ErrorMessage\n                    name=\"firstName\"\n                    component=\"div\"\n                    className=\"field-error text-danger\"\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    placeholder=\"Doe\"\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"firstName\">\n                    {(msg /** this is the same as the above */) => (\n                      <div className=\"field-error text-danger\">{msg}</div>\n                    )}\n                  </ErrorMessage>\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"email\"\n                    placeholder=\"jane@acme.com\"\n                    type=\"email\"\n                  />\n                  {/* This will render a string */}\n                  <ErrorMessage name=\"email\">\n                    {(msg /** this is the same as the above */) => (\n                      <div className=\"field-error text-danger\">{msg}</div>\n                    )}\n                  </ErrorMessage>\n                </FormGroup>\n\n                <Button.Ripple color=\"primary\" className=\"mt-1\" type=\"submit\">\n                  Submit\n                </Button.Ripple>\n              </Form>\n            )}\n          />\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default FormikErrorMsg\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  FormGroup,\n  Button,\n  Label\n} from \"reactstrap\"\nimport { Formik, Field, Form } from \"formik\"\nimport * as Yup from \"yup\"\n\nconst formSchema = Yup.object().shape({\n  required: Yup.string().required(\"Required\"),\n  email: Yup.string()\n    .email(\"Invalid email\")\n    .required(\"Required\"),\n  number: Yup.number().required(\"Required\"),\n  url: Yup.string()\n    .url()\n    .required(\"Required\"),\n  date: Yup.date().required(\"Required\"),\n  minlength: Yup.string()\n    .min(4, \"Too Short!\")\n    .required(\"Required\"),\n  maxlength: Yup.string()\n    .max(5, \"Too Long!\")\n    .required(\"Required\")\n})\n\nclass FormValidation extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle> Validation</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Formik\n            initialValues={{\n              required: \"\",\n              email: \"\",\n              url: \"\",\n              number: \"\",\n              date: \"\",\n              minlength: \"\",\n              maxlength: \"\"\n            }}\n            validationSchema={formSchema}\n          >\n            {({ errors, touched }) => (\n              <Form>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"required\">Name</Label>\n                  <Field\n                    name=\"required\"\n                    id=\"required\"\n                    className={`form-control ${errors.required &&\n                      touched.required &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.required && touched.required ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.required}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"email\">Email</Label>\n                  <Field\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    className={`form-control ${errors.email &&\n                      touched.email &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.email && touched.email ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.email}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"url\">Website URL</Label>\n                  <Field\n                    name=\"url\"\n                    id=\"url\"\n                    className={`form-control ${errors.url &&\n                      touched.url &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.url && touched.url ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.url}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"number\">Number</Label>\n                  <Field\n                    name=\"number\"\n                    id=\"number\"\n                    className={`form-control ${errors.number &&\n                      touched.number &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.number && touched.number ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.number}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"date\">Date</Label>\n                  <Field\n                    type=\"date\"\n                    name=\"date\"\n                    id=\"date\"\n                    className={`form-control ${errors.date &&\n                      touched.date &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.date && touched.date ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.date}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"minlength\">\n                    Min Length (Minimum 4 Characters)\n                  </Label>\n                  <Field\n                    name=\"minlength\"\n                    id=\"minlength\"\n                    className={`form-control ${errors.minlength &&\n                      touched.minlength &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.minlength && touched.minlength ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.minlength}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"maxlength\">\n                    Max Length (Maximum 5 Characters)\n                  </Label>\n                  <Field\n                    name=\"maxlength\"\n                    id=\"maxlength\"\n                    className={`form-control ${errors.maxlength &&\n                      touched.maxlength &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.maxlength && touched.maxlength ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.maxlength}</div>\n                  ) : null}\n                </FormGroup>\n                <Button.Ripple color=\"primary\" type=\"submit\">\n                  Submit\n                </Button.Ripple>\n              </Form>\n            )}\n          </Formik>\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default FormValidation\n","import React from \"react\"\nimport { Row, Col } from \"reactstrap\"\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\"\nimport FormikBasic from \"./FormikBasic\"\nimport FormikErrorMsg from \"./FormikErrorMsg\"\nimport FormikValidation from \"./FormikValidation\"\n\nclass Formik extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Breadcrumbs\n          breadCrumbTitle=\"Formik\"\n          breadCrumbParent=\"Form\"\n          breadCrumbActive=\"Formik\"\n        />\n        <Row>\n          <Col lg=\"6\" md=\"12\">\n            <FormikBasic />\n          </Col>\n          <Col lg=\"6\" md=\"12\">\n            <FormikErrorMsg />\n          </Col>\n          <Col sm=\"12\">\n            <FormikValidation />\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\nexport default Formik\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}